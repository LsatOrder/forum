{"_id":{"$oid":"5e58e877c2200353b4dbed05"},"isup":false,"clicknum":0,"clicknumshow":true,"title":"Java中常用的三种产生随机数的方法详解","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e\u003ch3\u003e\u003cspan style=\"color: rgb(249, 150, 59);\"\u003eJava中常用的三种产生随机数的方法及其原理详解（currentTimeMills，random，Math.random）\u003c/span\u003e\u003c/h3\u003e这学期笔者开始学习Java，由于以前有了C做基础，学Java明显可以轻松许多，但是这几天有个问题很苦恼，有几道题目要产生随机数，我百度了一下，发现了多种使用的方法，但大多知识是零星的。于是今天我打算给大家分享一下我总结了的三种在Java里面很常用的方法。如果有任何不恰当的地方，欢迎大家在评论区不吝指出或者是私信我，我会尽力改正，给大家呈现更优质的内容。\u003cbr\u003e一.使用currentTimeMills\u003cbr\u003ecurrentTimeMills返回的是从1970年一月一日零时零分零秒到现在总共的毫秒数，我们可以用这个毫秒数来产生随机数。如何产生呢？\u003cbr\u003e\u003cbr\u003e如果要是产生[0,n-1]范围内的随机数，可以这样写：\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum1 = (int)(System.currentTimeMillis()%10);\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用当前时间获得[0,9]之间的随机数\u003c/p\u003e\u003cp\u003e\u003cbr\u003e这个函数就能够产生[0,9]范围内的随机数啦！\u003cbr\u003e那我们要是想产生多个随机数怎么办，有的小伙伴可能会想，我写两个不就好了，那我们看看写两个到底行不行：\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum1 = (int)System.currentTimeMillis()%10;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用当前时间获得[0,9]之间的随机数\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum2 = (int)System.currentTimeMillis()%10;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"用当前时间获得的随机数：\"+randomNum1+\" \"+randomNum2);\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//输出第一次：用当前时间获得的随机数：-1 -1\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//输出第二次：用当前时间获得的随机数：-1 -1\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//输出第三次：用当前时间获得的随机数：-9 -9\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003cbr\u003e我把程序运行了三次，但是奇怪的是，程序并没有按照我们所想的那样输出，这是为什么呢？细心地小伙伴可能发现了，上面第一个代码块和第二个代码块有一点细微的差别，第一个代码块System.currentTimeMillis()%10整体打上了括号，而第二个没有，出现这个问题的原因我细细说来。\u003cbr\u003e\u003cbr\u003e最最重要的一点，我们把随机数定义成了int型，而System.currentTimeMillis返回的是一个long型的毫秒数，所以我用了强制类型转换（int）要知道，强制类型转换（）可是优先级很高的，*，%的优先级都比它低，所以如果不打括号，系统就会把一个long型的值强制转换为int型，因为这个long型的数据的值太大了，以至于超过了int的范围，这个过程中当然会出错了，口说无凭，上代码：\u003cbr\u003e\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum1 = (int)(System.currentTimeMillis()%10);\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用当前时间获得[0,9]之间的随机数\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum2 = (int)System.currentTimeMillis()%10;\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;long randomNum3 = System.currentTimeMillis();\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum4 = (int)System.currentTimeMillis();\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"打括号：\"+randomNum1+\"\\n不打括号\"\u003cbr\u003e\u0026nbsp; \u0026nbsp; \u0026nbsp;+randomNum2+\"\\n函数返回值\"+randomNum3+\"\\n强制转换后得值\"+randomNum4);\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;/*\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;打括号：1\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;不打括号-3\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;函数返回值1582714328081\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;强制转换后得值-2128604143\u003cbr\u003e  \u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;打括号：8\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;不打括号-6\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;函数返回值1582714367538\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;强制转换后得值-2128564686\u003cbr\u003e  \u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;打括号：3\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;不打括号-1\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;函数返回值1582714395723\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;强制转换后得值-2128536501\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*/\u003cbr\u003e\u003cbr\u003e上面我三次运行了程序，相信小伙伴们应该知道错误的原因了吧！int的取值是在-2147483648~2147483647之间，显然这个返回的毫秒值完全超过了它的范围！于是我把代码改成这样：\u003cbr\u003e\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum1 = (int)(System.currentTimeMillis()%10);\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用当前时间获得[0,9]之间的随机数\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum2 = (int)(System.currentTimeMillis()%10);\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//long randomNum3 = System.currentTimeMillis();\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//int randomNum4 = (int)System.currentTimeMillis();\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"用当前时间获得[0,9]之间的随机数：\"+randomNum1+\" \"+randomNum2);\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用当前时间获得[0,9]之间的随机数：5 5\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用当前时间获得[0,9]之间的随机数：7 7\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用当前时间获得[0,9]之间的随机数：8 8\u003cbr\u003e\u003cbr\u003e上面的程序同样运行了三次，又出现了奇奇怪怪的效果，我本来是想产生两个随机数，但是这两个随机数怎么老是一样啊！\u003cbr\u003e\u003cbr\u003e当我们分析产生随机数的原理之后，很容易想到，因为是对时间进行运算，程序运行所需要的时间是很快的，两条间隔的语句获得时间的返回值相差的时间不到一毫秒，这样就导致了产生的随机数相同，只要把其中一个做一点改动就行，比如把返回值乘以一个数之后再取模，这样就能避免这种情况，上代码：\u003cbr\u003e\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum1 = (int)(System.currentTimeMillis()%10);\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum2 = (int)(System.currentTimeMillis()*3%10);\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//long randomNum3 = System.currentTimeMillis();\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//int randomNum4 = (int)System.currentTimeMillis();\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"用当前时间获得[0,9]之间的随机数：\"+randomNum1+\" \"+randomNum2);\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用当前时间获得[0,9]之间的随机数：4 2\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用当前时间获得[0,9]之间的随机数：1 3\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用当前时间获得[0,9]之间的随机数：6 8\u003cbr\u003e\u003cbr\u003e这样问题就能很好的解决了，至于怎么产生[a.b],范围内的随机数，让我们用数学来算：\u003cbr\u003e(int)(System.currentTimeMillis()%n\u003cbr\u003e原来的范围：[0,n-1] 两边同时加m\u003cbr\u003e(int)(System.currentTimeMillis()%n+m\u003cbr\u003e变化后的范围：[m,m+n-1]\u003cbr\u003e解方程组：a=m; b=m+n-1;\u003cbr\u003e\u003cbr\u003e可以知道产生[a,b]范围内的随机数，用(int)(System.currentTimeMillis()%n+m；其中m=a;n=b-a+1;\u003cbr\u003e\u003cbr\u003e第一个终于分享完了\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e二.使用random\u003cbr\u003e用法如下，直接砸代码：\u003cbr\u003e\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Random random = new Random();\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int a = random.nextInt(10);//产生[0,9]的随机数\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int b = random.nextInt(10);\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int c = random.nextInt(10);\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"用产生种子的方法获得的随机数：\"+a+\" \"+b+\" \"+c);\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用产生种子的方法获得的随机数：1 0 4\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用产生种子的方法获得的随机数：5 4 4\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用产生种子的方法获得的随机数：0 5 1\u003cbr\u003e\u003cbr\u003e照样，也运行了三次，产生的结果还是蛮好的，我们来解释一下\u003cbr\u003eRandom random = new Random();\u003cbr\u003e这一句的作用是产生种子值（）里面是可以带数字的，里面的数字就是种子值\u003cbr\u003e如果不带数字的话，那么种子值默认为当前时间的毫秒数\u003cbr\u003eint a = random.nextInt(10);\u003cbr\u003e这一句括号里面的10，意思是产生[0,9]范围内的随机数\u003cbr\u003e\u003cbr\u003e上面的程序演示的是不带种子值，那么我们要是带上种子值呢？看代码：\u003cbr\u003e\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Random random = new Random(1);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int a = random.nextInt(10);//产生[0,9]的随机数\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int b = random.nextInt(10);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int c = random.nextInt(10);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"种子值为1获得的随机数：\"+a+\" \"+b+\" \"+c);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//种子值为1获得的随机数：5 8 7\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//种子值为1获得的随机数：5 8 7\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//种子值为1获得的随机数：5 8 7\u003cbr\u003e\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Random random = new Random(2);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int a = random.nextInt(10);//产生[0,9]的随机数\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int b = random.nextInt(10);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int c = random.nextInt(10);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"种子值为2获得的随机数：\"+a+\" \"+b+\" \"+c);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//种子值为2获得的随机数：8 2 0\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//种子值为2获得的随机数：8 2 0\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//种子值为2获得的随机数：8 2 0\u003cbr\u003e\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Random random = new Random(2002);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int a = random.nextInt(10);//产生[0,9]的随机数\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int b = random.nextInt(10);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int c = random.nextInt(10);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"种子值为2002获得的随机数：\"+a+\" \"+b+\" \"+c);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//种子值为2002获得的随机数：8 3 7\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//种子值为2002获得的随机数：8 3 7\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//种子值为2002获得的随机数：8 3 7\u003cbr\u003e\u003cbr\u003e三次改变种子值，每次输出三次，每个种子值得到的结果相同，这是因为一旦确定了种子值，在范围内的随机数其实就已经指定了，如果要生成多个或者是多次随机数，最好还是不要指定种子值。\u003cbr\u003e\u003cbr\u003e下面要看看怎么产生[a,b]范围内的随机数，照样，我们来解方程：\u003cbr\u003eint a = random.nextInt(n);\u003cbr\u003e原来的范围：[0,n-1] 两边同时加m\u003cbr\u003eint a = random.nextInt(n)+m;\u003cbr\u003e变化后的范围：[m,m+n-1]\u003cbr\u003e解方程组：a=m; b=m+n-1;\u003cbr\u003e\u003cbr\u003e可以知道产生[a,b]范围内的随机数，用int a = random.nextInt(n)+m;其中m=a;n=b-a+1;这个范围的计算和第一种方法是一样的！\u003cbr\u003e\u003cbr\u003e三.使用Math.random()\u003cbr\u003eMath.random()返回一个double类型的随机数d,其中d的范围为[0,1)\u003cbr\u003e这个函数是这样使用的：\u003cbr\u003e\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int d = (int)(9 *Math.random())+1;\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//产生[1,10)的整数\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int e = (int)(9 *Math.random())+1;\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"用Math.random获得的随机数：\"+d+\" \"+e);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用Math.random获得的随机数：2 8\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用Math.random获得的随机数：4 6\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//用Math.random获得的随机数：2 6\u003cbr\u003e\u003cbr\u003e照样运行了三次，下面来解释一下：\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int d = (int)(9 *Math.random())+1;\u003cbr\u003e把得到的double类型的数强制转换为int型的数并赋值给int型的变量\u003cbr\u003e至于为什么范围是得到的产生[1,10)的整数的整数，老规矩\u003cbr\u003e\u003cbr\u003e数学代换走起\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int d = (int)((y-x)*Math.random())+x;\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[0,1.0) 同乘y-x\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[0,y-x) 两边+x\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[x,y)\u003cbr\u003e\u003cbr\u003e这样第三个产生随机数的问题我们也解决啦！！！\u003cbr\u003e\u003cbr\u003e最后，给大家看看这三种方式放在一起：\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;public class Test_fot_CSDN {\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;public static void main(String[] args){\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum1 = (int)(System.currentTimeMillis()%10);\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int randomNum2 = (int)(System.currentTimeMillis()*3%10);\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//long randomNum3 = System.currentTimeMillis();\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;//int randomNum4 = (int)System.currentTimeMillis();\u003cbr\u003e  \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"用当前时间获得[0,9]之间的随机数：\"+randomNum1+\" \"+randomNum2);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Random random = new Random(2002);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int a = random.nextInt(10);//产生[0,9]的随机数\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int b = random.nextInt(10);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int c = random.nextInt(10);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"用产生种子的方法获得的随机数：\"+a+\" \"+b+\" \"+c);\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int d = (int)(9 *Math.random())+1;//产生[1,10)的整数\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;int e = (int)(9 *Math.random())+1;\u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;System.out.println(\"用Math.random获得的随机数：\"+d+\" \"+e);  \u003cbr\u003e     \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;}\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;}\u003cbr\u003e \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;/*\u003cbr\u003e用当前时间获得[0,9]之间的随机数：8 4\u003cbr\u003e用产生种子的方法获得的随机数：8 3 7\u003cbr\u003e用Math.random获得的随机数：6 7\u003cbr\u003e*/\u003cbr\u003e\u003cbr\u003e那么，这次的分享就到这啦，希望各位看到我的文章能更加优秀，小伙伴们有什么好的想法，欢迎一起交流哦\u003cbr\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_e94b074be615e1a75244d35ff658105b.png","publishtimeCN":"2020年02月28日 18:16:23","publishtime":1.582884983e+12,"__v":0,"uptime":""}
{"_id":{"$oid":"5e5b43635fc4468e00939ec7"},"isup":false,"clicknum":0,"clicknumshow":true,"title":"我是图灵，我的钱用算法加密后找不到了！","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e本文由《万物》杂志官方微信\u0026nbsp;“把科学带回家”\u0026nbsp;提供\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_223e6ad9a32ff52c37ec6c7836c2816c.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cbr\u003e\u003c/div\u003e图灵的故事相信大家耳熟能详了。二战期间，他在英国布莱切利公园和帮助萌盟军军破译纳粹的恩尼格玛密码机。\u003cbr\u003e\u003cbr\u003e2012年，据新西兰坎特伯雷大学的学者\u0026nbsp;Jack\u0026nbsp;Copeland\u0026nbsp;估计，图灵和打码（打击恩尼格玛）小伙伴让二战缩短了2年，挽救了1400万人的生命。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_4bd25cb7c51610bb3710fbdf73270322.gif\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e讲述图灵破译德军恩尼格玛密码机的电影《模仿游戏》\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e图灵还是计算机和人工智能的先驱，鉴定机器是否具有智能的图灵测试也是他发明的。苹果公司的LOGO里被咬了一口的苹果就经常被误认为是为了纪念图灵吞下的毒苹果而设计的（虽然乔布斯说不是）。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_d11e5fa8b7e7e0579491966d05af3b2a.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e但是大家可能没有听说过图灵的一个憨憨黑历史——他曾经把银子仔细地埋好，还用算法把埋藏地点加密，但是后来他却怎么也找不到自己的财宝了。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e事情是这样的，二战期间，物价一天一个样，图灵也想买点什么保值的东西，应对金融风暴。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e一开始，图灵的想法是把所有的钱拿来买剃须刀。Emmm，图灵的逻辑是这样的，打仗以后钢材紧缺，制造剃须刀的加工厂搞不到原料，而且剃须刀虽然不是战备物资，但却是精致男孩的生活必需品嘛，所以一定可以升值的。投资剃须刀，机智！\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_86f2a6d491e8a8948f4aa9582e1435d3.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e不过呢，图灵在剑桥大学的小伙伴、另一位数学家大卫·钱珀瑙恩（David\u0026nbsp;Champernowne）却有不同的见解。他注意到在一战期间，市场上的银锭是少数没有掉价的投资品，走势不错哦。就这样，图灵被说服了，理科投资二人组就开始囤积银锭。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_d2593a47537c9eb81b02f4136bd7d050.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e图灵把自己的250英镑财产，相当于现在的1.4万英镑身家全部换成了两块分别重达90千克的银锭。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e现在问题来了，这么多钱放在家里也不是个事儿啊，万一英国被德国打败，自己的财产很有可能就会被充公。就算德国人没有占领英国，丘吉尔爷爷为了筹集战争经费，说不定会让自己交高额的交易税。所以，图灵决定不把银锭放到银行里，而是找个地方藏起来。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e于是乎，图灵找了一辆婴儿小车车，把银锭伪装成180斤的北鼻，然后偷偷运到了自己最熟悉的地方——破解恩尼格玛的布莱切利公园。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e他把其中一块银锭埋在\u0026nbsp;Shenley\u0026nbsp;路附近小树丛里，另一块埋在一座桥下的河床里。图灵这么干并不是心血来潮，他小时候就很喜欢学校组织的寻宝活动，把头发梳成大人式样后也经常组织寻宝娱乐。\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_21f012294735c1ef242ef1d73ef5f6c5.gif\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e为了保护藏宝地点，他还用算法把宝藏图加密了，还把密文塞到一个吸鼻器里面，并把它藏到另一座桥下。总之，计算机之父发明了一种世界上最早的以区块形态分布式储存的加密货币。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e图灵在作案时有没有打扮成少妇模式我们并不清楚。如果他没有，这很有可能就是他暴露的重要原因。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e完事儿以后，心大的图灵还很喜欢跟别人讲自己的这个天才计划。此外，他依旧没有放弃剃须刀这个投资品。有一次，他提议和他一起破译密码的数学家彼得·特文（Peter\u0026nbsp;Twinn）买一箱剃须刀埋起来，就可以等着发财啦。想想看，人工智能先驱图灵在伦敦街头站在贴膜小哥边上兜售剃须刀，好刺激啊。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_ab519122ca0f182959b0ba13c0d2652f.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e不久，时间给图灵带来了一个好消息和一个坏消息。好消息是，钱珀瑙恩的分析果然没错。在1946年3月，也就是二战结束后不久，伦敦市场上银的价格比1940年时上涨了80%。图灵和钱珀瑙恩都感到心里美滋滋的。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_d523cb1ce1f36e220bb056fb1d3623ff.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e因为钱珀瑙恩把银锭存在了银行，所以他马上套现了，赚了一大笔。图灵也想套现，于是去挖自己的宝。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e但坏消息是，小树丛的定位地标发生了变化，精心隐藏的银锭怎么也找不到了。为了搜寻自己的积蓄，图灵还自制了金属探测仪。用这个金属探测仪，图灵在小树丛里挖到了其他七七八八的各类金属制品，但就是没有找到自己的。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e更悲剧的是，虽然埋在桥下的那块银锭虽然很容易定位，图灵也亲自脱掉鞋子卷起裤管下水作业了，但是那块银锭也找不着了。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_9fc73965594ee8041bcb29b2f219cff2.gif\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e图灵好气哦。1944年和1946年，他分多次在两处挖银，但是什么银都没挖到，这种情况简直让人想骂银。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e1952年，由于英镑对美元贬值，所以他的银锭实际上又升值了30%，简直是天降横财，如果它们还存在的话。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e于是在这一年的暑假，他下定决心，花钱搞来了一个专业的金属探测仪再去试试。试试就逝世。埋着银锭的那座桥已经被重建了，下面的河床上也覆盖上了水泥。没有设定野生理财变动通知的时候就是这样的啦。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_68db9b76c3356496f852ade308fba4c6.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e雪上加霜的是，因为他找了一个一起在布莱切利公园破译密码的码农一起挖宝，他还要付给人家一天5英镑的薪水，相当于现在的一天280英镑的工资。这次，图灵是真的死了心，就当自己智商太高被地球收智商税了吧。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e但不幸接踵而至。1954年，也就是图灵开始研究形态发生（morphogenesis）——生物身上的图案的形成的这年，41岁的图灵咬下了涂有***的苹果。图灵人走了，他的银锭还在地球上流浪。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_5006b74687fa603009499dc1e9bb3e7d.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e南海泡沫事件与密西西比泡沫事件及1637年的郁金香狂热并称欧洲早期“三大经济泡沫”。在1720年的南海泡沫事件中，全民疯狂炒股，牛顿也血本无归。图为英国国民踊跃申购南海公司的股票。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e历史上和这次科学家投资失败事件能够相提并论的恐怕只有被皮包公司南海公司骗走了2万英镑（等同于10年工资）的牛顿君了吧。他们在天堂相遇时应该会含泪相视一笑。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_22b163bfe3fd555f675a831332259bf7.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e因为这个故事过于有趣，图灵曾工作过的英国曼彻斯特大学还用它当作脚本，在2014年上线了一个寻宝游戏。因为很火爆，这个游戏成了数学系的保留活动。今年的竞赛已于1月27号开始，有兴趣的同学可以去曼彻斯特大学数学系围观一下。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e图灵：大家好，我是不列颠的后裔，攻城狮先民的王，密码学守护者，梅达谷人阿兰，恩尼格玛打破者，计算之父，算盘侠的解放者，人工智能的王，中文屋王子。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e地球：你币没了。\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003cp\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_2287e7a32d0afe51fa9ffbe4e32c5a72.png","publishtimeCN":"2020年03月01日 13:08:51","publishtime":1.583039331e+12,"__v":0,"uptime":""}
{"_id":{"$oid":"5e5b4f5b5fc4468e00939ec8"},"isup":false,"clicknum":0,"clicknumshow":true,"title":"美国依阿华级“密苏里”号","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e\u0026nbsp; 正文\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_68199b1b4e1c542b8152c31c27a665df.webp\" style=\"max-width: 100%;\"\u003e\u003c/div\u003e“密苏里”号战列舰是美国海军依阿华级战列舰的三号舰，建成于1944年，同年服役，1945年一月，密苏里号作为第三舰队旗舰，正式加入美国太平洋舰队，1945年2月至7月，先后参加硫磺岛战役，冲绳岛战役和对日本本土的攻击作战。该舰服役后不久，就因在1945年9月2日作为第二次世界大战，日本无条件投降的签字地点而声名大震。这也为第二次世界大战画上了圆满的句号。该舰于1955年正式成为预备役封存的战列舰，曾经曾多次复出，直到1992年正式退役。\u003cbr\u003e\u003cbr\u003e设计特点\u003cbr\u003e\u003cbr\u003e这艘1944年6月11日服役的新型战列舰，最初装有三座三联装406毫米主炮和149门各式口径的副炮和高炮，还载有三架水上飞机，舰上动力装置由八座锅炉和四台蒸汽轮机组成，采用四轴推进方式，总功率为15.6万千瓦，最大航速35节。\u003cbr\u003e\u003cbr\u003e全舰通体有装甲防护，舰艇一般部位厚150毫米，重要部位达400毫米。这也是战后世界上中甲最厚的水面战舰。\u003cbr\u003e\u003cbr\u003e海湾之旅\u003cbr\u003e\u003cbr\u003e“密苏里”号最后一次现代化改装完成于1986年次年5月10日重新加入美国海军服役，1990年8月2日，伊拉克入侵科威特，海湾危机爆发，密苏里号和威斯康星号战列舰迅速驶向海湾。沙漠风暴战斗打响后，密苏里号和威斯康辛号战列舰先后向伊拉克发射了“战斧”巡航导弹。\u003ccode\u003e\u003c/code\u003e\u003c/p\u003e\u003cp style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_6c103b3d175c6236c216b8ee336c4558.webp\" style=\"max-width:100%;\"\u003e\u003cspan style=\"font-size: 16px;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan style=\"font-size: 16px;\"\u003e“密苏里”号发射“战斧”巡航导弹\u003c/span\u003e\u003c/p\u003e1991年2月4日凌晨，密苏里号战列舰在装备高级水雷规避声呐的柯茨号护卫舰的护航下，通过水雷区到达指定攻击阵位，用九门406毫米大炮队，对伊拉克军队的指挥中枢、弹药库、炮阵地，导弹阵地和雷达站等目标予以破坏。给地面进攻部队以强有力的火力支撑，这些舰炮在舰上“先锋”式无人机的引导下，攻击非常准确，1992年3月31日，在热烈的礼炮和号角声中，密苏里号缓缓的驶回美国洛杉矶码头，结束了它辉煌的一生。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_3afaa9df7cd0923bdc8c069a4983df6e.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e“密苏里”号开炮场景\u003cbr\u003e役后生涯\u003cbr\u003e\u003cbr\u003e1998年5月4日，美国海军部长John•H•Dalton签署了捐赠协议，将这艘历史名舰转交给位于夏威夷的美国密苏里号战列舰纪念协会，6月22日，密苏里号战列舰从华盛顿州的布雷默顿转移到珍珠港停泊，在福特岛旁边，距离一千米处就是珍珠港事件中亚利桑那号战列舰的沉没的地方———美国亚利桑那号战列舰纪念馆。1999年1月密苏里号正式向公众开放。\u003cbr\u003e\u003cbr\u003e密苏里号于2009年十月离开珍珠港进行维修工作，这艘有着65年历史的战列舰状况良好，不过因为漆面剥落的大片区域锈迹斑斑，柚木甲板早已弯曲，所以需要在珍珠港海军船厂进行维修，2010年1月7日，密苏里号经过三个月的维修保养后，自夏威夷珍珠港的干船坞驶回到原来的展览位置，于当年1月15日重新开放。\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003cp\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_27a500cf7c03bb7430b1aa66405c9829.png","publishtimeCN":"2020年03月01日 13:59:55","publishtime":1.583042395e+12,"__v":0}
{"_id":{"$oid":"5e5dcf62617a995a489830fd"},"isup":false,"clicknum":0,"clicknumshow":true,"title":"2020年研究生招生规模或将达到110万人！","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e\u0026nbsp; 近期关于硕士研究生扩招通知引发社会关注，近期教育部在会议提到将扩大今年硕士研究生的招生和专升本的规模，根据教育部测算，硕士研究生招生规模预计比去年增加18.9万。小编整理“2020年研究生招生规模或将达到110万人！”相关资讯，关注一下~　\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_87ceab3fa5e73312a427f6f0ae652f7a.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e　　（国家统计局官网截图）\u003cbr\u003e\u003cbr\u003e　　2020年研究生招生规模或将达到110万\u003cbr\u003e\u003cbr\u003e　　《公报》第十条“科学技术和教育”部分显示，全年研究生教育招生91.7万人，在学研究生286.4万人，毕业生64.0万人。普通本专科招生914.9万人，在校生3031.5万人，毕业生758.5万人。中等职业教育[70]招生600.4万人，在校生1576.5万人，毕业生493.4万人。普通高中招生839.5万人，在校生2414.3万人，毕业生789.2万人。初中招生1638.8万人，在校生4827.1万人，毕业生1454.1万人。普通小学招生1869.0万人，在校生10561.2万人，毕业生1647.9万人。特殊教育招生14.4万人，在校生79.5万人，毕业生9.8万人。学前教育在园幼儿4713.9万人。九年义务教育巩固率为94.8%，高中阶段毛入学率为89.5%。\u003cbr\u003e\u003cbr\u003e　　国务院联防联控机制在2月28日上午的新闻发布会上发布消息说，经过测算，扩大硕士研究生招生的规模同比比去年可能会增加18.9万，那么2020年研究生招生或将可能达到110.6万人。\u003cbr\u003e\u003cbr\u003e　　2019年全年研究与试验发展经费支出21737亿元\u003cbr\u003e\u003cbr\u003e　　《公报》显示，2019年全年研究与试验发展（R\u0026amp;D）经费支出21737亿元，比上年增长10.5%，与国内生产总值之比为2.19%，其中基础研究经费1209亿元。国家科技重大专项共安排234个课题，国家自然科学基金共资助45192个项目。截至年底，正在运行的国家重点实验室515个，累计建设国家工程研究中心133个，国家工程实验室217个，国家企业技术中心1540家。国家科技成果转化引导基金累计设立21支子基金，资金总规模313亿元。国家级科技企业孵化器1177家，国家备案众创空间1888家。全年境内外专利申请438.0万件，比上年增长1.3%；授予专利权259.2万件，增长5.9%；PCT专利申请受理量为6.1万件。截至年底，有效专利972.2万件，其中境内有效发明专利186.2万件，每万人口发明专利拥有量13.3件。全年商标申请783.7万件，比上年增长6.3%；商标注册640.6万件，增长27.9%。全年共签订技术合同48.4万项，技术合同成交金额22398亿元，比上年增长26.6%。\u003cbr\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_149a9e53de97de35f42992923a2bea65.png","publishtimeCN":"2020年03月03日 11:30:42","publishtime":1.583206242e+12,"__v":0}
{"_id":{"$oid":"5e5dd16b617a995a489830fe"},"isup":false,"clicknum":0,"clicknumshow":true,"title":"朋友圈卖医用口罩要资质吗？","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e\u0026nbsp; 需取得营业执照、第二类医疗经营备案凭证、医疗器械网络销售备案通告。未取得以上资质，销售医用口罩可被处以罚款，没收违法所得等行政处罚。\u003cbr\u003e\u003cbr\u003e情况简介\u003cbr\u003e\u003cbr\u003e疫情爆发以来，口罩成为必需品，朋友圈中卖口罩的信息铺天盖地。\u003cbr\u003e\u003cbr\u003e口罩可以想卖就卖吗？\u003cbr\u003e\u003cbr\u003e卖口罩要取得什么资质？\u003cbr\u003e\u003cbr\u003e没有资质会受到什么处罚？\u003cbr\u003e\u003cbr\u003e情况分析\u003cbr\u003e\u003cbr\u003e首先，个人通过微信销售口罩，属于通过互联网等信息网络销售商品，属于电子商务经营者。电子商务经营者应当办理市场主体登记，取得营业执照。\u003cbr\u003e\u003cbr\u003e其次，医用口罩销售需要取得备案。医用口罩作为一种医疗用品,属于第二类医疗器械。经营者应当向食药监局申请并取得《第二类医疗经营备案凭证》。\u003cbr\u003e\u003cbr\u003e再次，经营者利用网络销售医用口罩，还应当向食药监局申请并取得医疗器械网络销售备案通告。\u003cbr\u003e\u003cbr\u003e最后，经营者在进货时，要查验供货者的资质和口罩的合格证明文件，如《医疗器械注册证》，建立进货查验记录制度和销售记录制度。\u003cbr\u003e\u003cbr\u003e综上，未取得以上资质销售医用口罩，可能会被处以罚款、没收违法所得，没收货物等行政处罚。\u003cbr\u003e\u003cbr\u003e法律法规\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e《电子商务法》\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e第二条\u0026nbsp;本法所称电子商务，是指通过互联网等信息网络销售商品或者提供服务的经营活动。\u003cbr\u003e\u003cbr\u003e第十条\u0026nbsp;电子商务经营者应当依法办理市场主体登记。\u003cbr\u003e\u003cbr\u003e第十二条\u0026nbsp;电子商务经营者从事经营活动，依法需要取得相关行政许可的，应当依法取得行政许可。\u003cbr\u003e\u003cbr\u003e《医疗器械网络销售监督管理办法》\u003cbr\u003e\u003cbr\u003e第七条\u0026nbsp;从事医疗器械网络销售的企业应当是依法取得医疗器械生产许可、经营许可或者办理备案的医疗器械生产经营企业。法律法规规定不需要办理许可或者备案的除外。\u003cbr\u003e\u003cbr\u003e第八条\u0026nbsp;从事医疗器械网络销售的企业，应当填写医疗器械网络销售信息表，将企业名称、法定代表人或者主要负责人、网站名称、网络客户端应用程序名、网站域名、网站IP地址、电信业务经营许可证或者非经营性互联网信息服务备案编号、医疗器械生产经营许可证件或者备案凭证编号等信息事先向所在地设区的市级食品药品监督管理部门备案。相关信息发生变化的，应当及时变更备案。\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e《医疗器械监督管理条例》\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e第三十条\u0026nbsp;从事第二类医疗器械经营的，由经营企业向所在地设区的市级人民政府食品药品监督管理部门备案并提交其符合本条例第二十九条规定条件的证明资料。\u003cbr\u003e\u003cbr\u003e第三十二条\u0026nbsp;医疗器械经营企业、使用单位购进医疗器械，应当查验供货者的资质和医疗器械的合格证明文件，建立进货查验记录制度。从事第二类、第三类医疗器械批发业务以及第三类医疗器械零售业务的经营企业，还应当建立销售记录制度。\u003cbr\u003e\u003cbr\u003e第六十三条\u0026nbsp;有下列情形之一的，由县级以上人民政府食品药品监督管理部门没收违法所得、违法生产经营的医疗器械和用于违法生产经营的工具、设备、原材料等物品；违法生产经营的医疗器械货值金额不足1万元的，并处5万元以上10万元以下罚款；货值金额1万元以上的，并处货值金额10倍以上20倍以下罚款；情节严重的，5年内不受理相关责任人及企业提出的医疗器械许可申请：\u003cbr\u003e\u003cbr\u003e（一）生产、经营未取得医疗器械注册证的第二类、第三类医疗器械的；\u003cbr\u003e\u003cbr\u003e（二）未经许可从事第二类、第三类医疗器械生产活动的；\u003cbr\u003e\u003cbr\u003e有前款第一项情形、情节严重的，由原发证部门吊销医疗器械生产许可证或者医疗器械经营许可证。\u003cbr\u003e\u003cbr\u003e第六十八条有下列情形之一的，由县级以上人民政府食品药品监督管理部门和卫生计生主管部门依据各自职责责令改正，给予警告；拒不改正的，处5000元以上2万元以下罚款；情节严重的，责令停产停业，直至由原发证部门吊销医疗器械生产许可证、医疗器械经营许可证：\u003cbr\u003e\u003cbr\u003e（二）医疗器械经营企业、使用单位未依照本条例规定建立并执行医疗器械进货查验记录制度的；\u003cbr\u003e\u003cbr\u003e（三）从事第二类、第三类医疗器械批发业务以及第三类医疗器械零售业务的经营企业未依照本条例规定建立并执行销售记录制度的；\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_85a9c3159141c4b8dd7c9f8754e84704.png","publishtimeCN":"2020年03月03日 11:39:23","publishtime":1.583206763e+12,"__v":0}
{"_id":{"$oid":"5e5dd7ed617a995a48983100"},"isup":false,"clicknum":0,"clicknumshow":true,"title":"【英雄联盟】韧性减控计算公式","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e\u0026nbsp; 众所周知,在英雄联盟里，韧性并非是简单的加法叠加的，否则盖伦只要一双水银鞋就可以在开w时达到惊人的90%减控，事实上只有72%。而我要在这篇文章中告诉大家韧性的计算公式。我会在第一部分进行简单易懂的主要论述，并在最后添加一个选读的数学部分。\u003cbr\u003e\u003cbr\u003e有多个韧性时，分别进行计算，将第一个计算后剩余控制时间乘以（1-韧性2），再将剩余时间乘以（1-韧性3）......以此类推。最后面板的呈现则是实际的控制减少百分比的四舍五入取整，由此可以得到以下结论：除非你一次性获得100%的韧性，否则你不可能绝对免控，但在游戏里没有100%的韧性，所以你无法完全免控。\u003cbr\u003e\u003cbr\u003e从实战角度讲我们得到一下结论，\u003cbr\u003e\u003cbr\u003e1.首先韧性是越叠越少且多次少叠收益极小，所以坚定（施放召唤师技能后可以短时间获得15%韧性）的作用在你韧性高时其实不大，若你有且仅有水银鞋则只有10秒的16%减控（仅计算一个召唤师技能）与后序的13%减控（计算了两个召唤师技能）收益。\u003cbr\u003e\u003cbr\u003e2.其次韧性的堆叠是越来越收益低的，所以最好不要太钻牛角尖，想要减控的话出一件水银鞋即可，坦克可以考虑点个坚定或传说\u0026nbsp;韧性。举个例子说，盖伦w点满有60%韧性，出水银鞋只有12%的减控收益，实在对不起花的那个钱，此时再点坚定的话竟只有10秒7%（仅计算一个召唤师技能）的减控与后续的5%（计算了两个召唤师技能）低减控收益。所以建议不点。\u003cbr\u003e\u003cbr\u003e3.理论最高减控为无限火力的25%+盖伦的60%+水银的30%+传说韧性30%+坚定的15%+坚定的15%+坚定的10%+坚定的10%得86%的减控。\u003cbr\u003e\u003cbr\u003e还有关键的一点是经过测试，坚定的最多4个韧性加成是分开来算而非加到一块的（否则就太OP了）\u003cbr\u003e\u003cbr\u003e数学部分（选读）：\u003cbr\u003e\u003cbr\u003e公式：\u003cbr\u003e\u003cbr\u003e1.S=a+(1-a)*b(两韧性时)\u0026nbsp;S=c+(1*c)*(a+(1-a)*b)（三韧性时）以此类推。\u003cbr\u003e\u003cbr\u003e可以证明计算顺序不改变终值。\u003cbr\u003e\u003cbr\u003e当然，我们可以更严谨的表述：\u003cbr\u003e用Sn表示经过前n个韧性计算后的减控百分比，用Tn表示第n个韧性。\u003cbr\u003e\u003cbr\u003e则有递推式为：\u003cbr\u003e\u003cbr\u003e2.Sn=S(n-1)*Tn\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;S1=1-T1\u003cbr\u003e\u003cbr\u003e可证计算顺序不改变终值（我证明不能...求大佬）\u003cbr\u003e\u003cbr\u003e出于我发现B站上还没有人写过关于韧性的文章，所以就写出来造福大众（倘若我的水平可以的话）。还请大家能够多多指出我的错误之处，无论是数据计算还是游戏理解（尤其是这点）希望我能够更加精进自己的水平，共勉共勉。\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_3cc10e214e4682c330b057a7d124a09e.png","publishtimeCN":"2020年03月03日 12:07:09","publishtime":1.583208429e+12,"__v":0}
{"_id":{"$oid":"5e5de892617a995a48983101"},"isup":false,"clicknum":0,"clicknumshow":true,"title":"2019年北京高考优秀作文：文明的韧性","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e\u0026nbsp;\u003cspan style=\"font-weight: bold;\"\u003e 一、作文真题\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"font-weight: bold;\"\u003e【2019年北京高考作文真题1】\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e“韧性”是指物体柔软坚实、不易折断的性质。中华文明历经风雨，绵延至今，体现出“韧”的精神。回顾漫长的中国历史，每逢关键时刻，这种文明的韧性体现得尤其明显。中华民族的伟大复兴，更需要激发出这种文明的韧性。\u003cbr\u003e\u003cbr\u003e请以“文明的韧性”为题，写一篇议论文。可以从中国的历史变迁、思想文化、语言文字、文学艺术、社会生活及中国人的品格等角度，谈谈你的思考。要求：观点明确，论据充分，论证合理。\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e二、真题点评和立意指导\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e北京今年的高考作文题，继承了以往的命题特点：题目具体朴实，但又充满内涵。题目具体朴实，就是表意清晰，具体，明确，学生容易上手，命题者没有在审题上为难考生。内涵丰富，就是细细琢磨，能够挖掘出丰富内涵来，能够写出深度、厚度。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e题目给出了“韧性”定义：物体柔软坚实、不易折断的性质。接着指出中华文明历经风雨，绵延至今，体现出“韧”的精神。随后强调了“韧”的意义：不管是历史上，还是当下，甚至是未来，都对中华民族意义重大。因此，写作文的时候，立意角度有很多个，比如，可以探询中华文化的韧性，是怎么来的？这个文化的韧性，又有何具体意义？这种韧性对青少年成长有何价值，等等。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e对于上述立意，寨主编辑的作文资料《中高考必备作文素材》中，有非常实用的典例和素材。此外，在高考前提供的作文模板中，也包含了文化类范文。人大附中的戴承霖同学借鉴了寨主上述资料，在今年高考中，作文得到了47分的高分，差3分就是满分（北京高考大作文满分是50分），助力语文总分达到了127分。下面是戴承霖同学考后根据回忆复写的高考作文。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e三、高分作文\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"font-weight: bold;\"\u003e文明的韧性\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e中国人民大学附属中学\u0026nbsp;2019届\u0026nbsp;15班\u0026nbsp;戴承霖\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e纵观历史，无数文明在时间的长河中翻滚，遭受着激荡与冲击——而大多数文明最终败给了一场巨大的危机，从而导致没落；众多璀璨文明当中，可以说，只有中华文明得以延续命脉，绵延至今。（这段话借鉴了寨主考前的群分享，我的原话是：金字塔下面除了埋葬着法老，也埋葬了古埃及文明；跟着汉莫拉比王朝一起消亡绝不仅仅是法典，还有古巴比伦的辉煌；墨西哥丛林中的大石柱，依然默默矗立着，感叹着当年玛雅文明的消逝……唯有中华文明，自诞生以来，源远流长，生生不息！）究其根本，是因为中华文明无论面对怎样的艰难险阻总能安稳度过，从未败给困难，而这正要归功于中华文明血脉中的韧性。（开篇站在人类文明角度去切入，格局大，境界高，且非常自然引出主题：中华文明的韧性！这个开头真不错！）\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e这种韧性，本质上是一种面对困难时暂避锋芒、养精蓄锐，并等待时机，扭转乾坤的品质。（承接第一段的主题，开始分析，揭示韧性的本质！）将历史的镜头转向洋务运动——彼时，国力贫弱，工业与军备远远落后于西洋列强。（例子简洁，举例的方式巧妙，语言很灵活！）面对此般逆境，文明的韧性发挥了它的作用。比起闭门造车，中国选择了养精蓄税，以市场换技术，引入洋船洋枪，积极学习西方。虽然由于种种原因，洋务运动没有力挽狂澜，拯救中国，但这种韧性却伴随着暂避锋芒的做法深藏于中国心底，等待着发芽的契机。（最后一句既是总结，也是过渡，很巧妙地引出了下文！这是寨主课上讲过的一种技法：柔性过度！）\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e这颗韧性的种子，最终等到了适合它生长的土壤。回望中国铁路的发展旅程，当我国仍使用龟速行驶的绿皮车时，日本的新干线早已呼啸着横跨岛屿。面对新的困难，中华文明的韧性再次发挥作用。像洋务运动一样，我们仍然以市场换技术，从而获取了日本、法国的核心轨道技术，而这恰恰扫清了中国铁路技术停滞不前的障碍。（承接上文，前后照应！）借助外来技术突破了瓶颈，之后的发展便愈发顺畅，最终才有了和谐号、复兴号在世界领跑的局面。可以说，正是这种文明的韧性发挥了作用，才化腐朽为神奇，辅助中国铁路逆转乾坤，直上青云。（这一段跟上一段衔接紧密，分析具体，且语言干净利落，句子灵活，写得相当出色！）\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e或许有人说，中国目前国力强盛，并没有处于困境，这种韧性还能派上用场吗？（寨主模板中提到过的让步分析，以退为进！）我认为，领跑者的确看不到文明的韧性发挥作用，但不能因为一时处于优势就摒弃了韧性。在长久的中华伟大复兴之路上，我们定会遇到更多、更艰巨的困难，只有一直秉守中华文明的韧性，才能让东方巨轮行稳致远，长久前行。（鞭辟入里，让人信服！）\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e不只是国家和民族，于个人，韧性更能发挥它的作用。（这是寨主提到过的反向分析法，或者说由大入小法，从国家和时代着手，再写个人，就是这种写法。）相比于国家，个人在人生路途中遇到的困境更多，韧性就能频频发挥作用，让人笑对苦难，砥砺前行。实际上，中华文明的韧性，也正是每个华夏子弟秉持的韧性堆叠起来所构成的。所以，作为炎黄子孙，我们应该坚信“天行健，君子以自强不息”，不断体现我们血脉中的文明韧性。（这里收束有点快，也是这篇作文不能得满分的重要原因，如果再来一个环节：扣现实，也就是再写一段，联系当下青少年的一些现实问题，比如，承受一点失败就伤心欲绝，就想不开，甚至寻短见，继而进一步指出，文化的韧性对青少年尤其重要，可以提高他们的耐挫力，让他们更坚强，更好面对困难和挑战。那这篇作文可能就不是47分，而是50分的满分了！有点遗憾，但瑕不掩瑜，全文依然是很优秀的考场作文！）\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e“每个人生来都是帝王，只是一时流浪”，诗人王尔德在作品中写到。当轮椅的轱辘声第一次在琉璃瓦的古殿中回响时，《我与地坛》的诞生就已写下了开端。（借鉴了寨主的模板，模板的原话是：“身处井隅，心向璀璨。”这是王尔德一生的座右铭。当他拿起笔，《巨人的花园》便绽放了第一朵蓓蕾。寨主公开课讲过这种写法的好处，戴承霖应该听过这节课，所以高考考场上用得得心应手。）秉持韧性，华夏文明便能在荆棘丛生的道路上，开辟出一条必将经由的光明大道。\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_836e68ddc00f71b4734387e2c2435967.png","publishtimeCN":"2020年03月03日 13:18:10","publishtime":1.58321269e+12,"__v":0}
{"_id":{"$oid":"5e5de95e617a995a48983102"},"isup":false,"clicknum":0,"clicknumshow":true,"title":"读一本好书，终身受益","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e\u0026nbsp; 前言：今天凌晨看到新闻，通用电气公司前董事长和CEO杰克·韦尔奇先生去世了（老爷子一路走好），这让我回想起十几年前的一件事。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2002年至2004年，雷军在金山公司内组织了一个“干部培训班”，每个月雷军都会花一整天时间，给这个班讲课，三年时间从未间断。当时还是一名部门经理的我有幸参加了这个培训班。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;虽然名字叫“干部培训班”，但雷军不止讲管理，基本上什么都讲，包括产品、战略、企业文化，甚至财务。当时雷军还担任卓越网的董事长，所以每次培训下午的时候有一个“新书推荐”环节，雷军会向我们推荐当月卓越网上架的新书。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;——你们能想到雷军在课堂上推荐过郭敬明的《幻城》吗？（＾_＾）\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;有一次，雷军推荐了《杰克韦尔奇自传》，让我们务必读一下，于是我就在卓越网上买了一本。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;买回来一读就放不下了，我连续两天读到深夜——这可不是因为我爱学习，而是这本书非常好看。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;其实很多牛人的自传都很好看。牛人之所以成为牛人，其经历一定与众不同，就像网络小说开挂的男主角一样。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;比如这位“杰克总”的履历：\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;“\u0026nbsp;1981年4月，年仅45岁的杰克·韦尔奇成为通用电气公司一百多年历史上最年轻的董事长和CEO。在他担任CEO的二十年间，他将一个弥漫着官僚主义气息的公司，打造成一个充满朝气，富有生机的企业。通用电气的市值也从他上任时的130亿美元上升到了4800亿美元。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;他于2001年9月退休后，被誉为“最受尊敬的CEO”，“全球第一CEO”，“美国当代最成功的企业家”。”\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;——我觉得小说的男主角也不过如此吧。。。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;这本自传，讲述了韦尔奇的人生经历，尤其是做通用电气CEO期间对公司的变革。我就当小说一样读，那几年反复读了不下十遍。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;书里面的很多内容，我现在都记忆犹新，比如“数一数二”战略，“活力曲线”，公司内部“无边界”，等等。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;读的次数多了，我也会自我代入韦尔奇的角色，去假想：如果是我，我会怎么做？\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;有时我还会对比书中的通用电气公司和我当时所在的金山公司，去假想：如果我是金山的CEO，我会像韦尔奇一样去变革吗？该如何变革呢？\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;当时我26岁，只是金山公司的一名基层经理，而杰克韦尔奇是世界顶级企业家，我离他的差距大概有太平洋那么远。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;但是因为这本书，让我能够学习如何像他一样去思考，像一名CEO一样去思考。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;我当时不会想到，四年之后，因为意外的原因，我会去创业，成为一名CEO。《杰克韦尔奇自传》中的很多观点和案例，对我之后管理公司都起到了重要的参考作用。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;工作前五年，我买的大部分书籍都是技术类的书籍，《杰克韦尔奇自传》与我的工作完全没关系。但是现在回头看，这本书反而是我那时读的书里对现在的工作最有用的。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;人生就是这样，你永远不知道未来将去做什么，好像充满了偶然。但是当你到达一个阶段，回头一看，其实你之前做的一些事就是为现在而准备的。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;所以，其实你读的每一本书都是有用的，你只是不清楚它何时会起作用而已。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;尤其是要读好书。我的一位老师曾经说过，读一本好书胜过读一百本普通的书。一本好书，能让人终身受益。\u003cbr\u003e\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;最后，感谢韦尔奇先生写了这么好的一本书，R.I.P.\u0026nbsp;Jack\u0026nbsp;Welch\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_6d1f16dbf39e49156890fc84e0690799.png","publishtimeCN":"2020年03月03日 13:21:34","publishtime":1.583212894e+12,"__v":0}
{"_id":{"$oid":"5e5ded30617a995a48983103"},"isup":false,"clicknum":0,"clicknumshow":true,"title":"自然界最疯狂的石头背后，可能还是一台反向的“天然地震仪”","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_5defeb3d1813e535d24761f71034e755.gif\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e\u003cp\u003e石头给人的印象总是沉稳的、笨拙的。但在自然界，却有一种石头总能激起人类内心最强烈的不安。\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_d834513c160a2a73c38d904225b9cef9.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e在挪威便有那么一块奇迹之岩，它位于吕瑟峡湾的谢拉格山（Kjeragbolten）之巅，就夹在两块巨岩的裂缝中间，看上去摇摇欲坠。\u003cbr\u003e\u003cbr\u003e而岩石的下方，就是近千米的深渊，让人不寒而栗。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_1f4840d16d1753cd2e2f0de56e4dd4a7.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e但每年依然有无数的游客慕名而来。他们会站在这块岩石上摆出各种奇葩姿势合影留念，以显示自己的勇气。\u003cbr\u003e\u003cbr\u003e有时候游客想要踏足这块的石头，甚至还得排上几分钟到几个小时不等的队伍。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_0dc83b94f52b37b94a6db2ac089ce3cf.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e目前为止，奇迹之岩还未发生过任何死亡案例。只是，没有人知道这块岩石什么时候会松动，我们也无法预知压垮岩石的最后一个人类姓甚名谁。但可以肯定的是，这块奇迹之石的坠落，只是一个时间问题。\u003cbr\u003e\u003cbr\u003e事实上，美国的一名小伙子就是因为脚踏上了类似的石头而被困在荒凉的峡谷足足127小时。最终还是忍痛将整截手臂割断，他才终于逃出生天。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_e4eb82bfdb398f9769206c8a352a42a7.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e根据真人真事改编的电影《127小时》\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e其实，类似挪威奇迹之岩的还有很多。它们都有一个统一的名字，就叫做“不稳定的平衡岩”（precariously\u0026nbsp;balanced\u0026nbsp;rocks）。\u003cbr\u003e\u003cbr\u003e这类岩石仅以一小部分与其他岩石或地面相接，但却能在各种作用力下保持微妙平衡，岩石大小从几分米到几米不等，重可达几吨到几百吨。而这每一块巨大的平衡岩，几乎都能成为当地的著名景点之一。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_e43769b7c5e73d4b52340f62f5f21767.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e美国科罗拉多州的巨大平衡岩\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e其中一些平衡岩甚至还会来回摇摆，也被称为“摇摆的石头”。而这在中国民间还有一个更形象的名词——风动石。\u003cbr\u003e\u003cbr\u003e例如我国福建漳州的铜山风动石就是最有名的岩石之一。这块高4米重约200吨的庞然大物与地面的接触面积大约只有10平方厘米。据说如果角度选得好，靠人力就能使这块巨石微微摇晃（不排除心理作用），惊险万分。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_427c475fecaeee6add7410b38d25298b.webp\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e福建漳州的铜山风动石\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e而更奇葩的平衡岩还数缅甸的“大金石”。这块重达600吨的神秘巨石就“挂”在悬崖峭壁上，看着岌岌可危但却屹立了2500年。佛教徒甚至还将这块巨石漆成金色，在这上面建起了一座小金塔，每天都有无数人参拜。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_f7025564b1def249cef034e873085680.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e至于大金石是如何形成的，到现在还是个谜。据猜测，它可能是由冰川搬运而来。冰川能将极为沉重岩石运输至几百公里外，等冰川融化后便会留下与当地大小和类型完全不同的岩石，也被称为冰川漂砾（glacial\u0026nbsp;erratic\u0026nbsp;）。例如加拿大的Okotok巨岩便是重达16500吨的冰川漂砾。\u003cbr\u003e\u003cbr\u003e不过，绝大多数的平衡岩，都是原地形成的，大概可以分为两个阶段。拿最常见的花岗平衡岩来举例，一般来说第一阶段都发生在地下。雨水和其他的化学物质会在相对完整的基岩缝隙中渗透，而那些在缝隙附近的矿物则会首先被分解，崩碎。随着侵蚀加深和地面高度的降低，那些风化了的物质就会被带走，只留下一堆坚硬的、难以风化的岩石，而这也叫做差异性风化、侵蚀。在非常巧合的情况下，这其中一些岩石的大小、形状和位置等都被风化和侵蚀得恰到好处，能让它稳当当地站立在地面或其他岩石的身上。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_65875fe834ebe453209efc9e918e423d.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e尽管想让平衡岩形成非常讲求天时地利，但这也好比往桌面上扔硬币，只要扔的时间够长、硬币数量够多，就总有硬币能摆脱“非正即反”的常态，坚强地竖立起来。\u003cbr\u003e\u003cbr\u003e所以说，平衡岩石这玩意儿很稀奇，但纵观全球却算不上稀有。而且别说是在地球上，人类似乎还在地球以外的星球上发现了这种神奇的平衡岩。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_5e2ac1bb7a7c5c05f058f79cf6366fbe.webp\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e彗星上的疑似平衡岩\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e2014年，欧洲航天局的科学家就在67P/\u0026nbsp;Churyumov-Gerasimenko彗星的艾克尔地区发现了三块不寻常的巨石。从照片看上去，这和地球上的平衡岩非常相像。没人知道这些彗星平衡岩是怎么形成的，但也有可能是远距离拍摄的角度、空间分辨率造成的误会。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e可谓天生我才必有用。除了“神奇”以外，这些屹立于全世界各地的平衡岩，还有一个身份就是“自然界的地震仪”。\u003cbr\u003e\u003cbr\u003e多年以来，许多科学家都试图通过研究诸如井里水位的波动、磁场的变化、甚至是动物的反常行为等前兆来预测地震的到来。但到目前为止，没有一个是真正成功的。\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_f05c4fdb474685fb980e0f31c32e4e24.webp\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e美国内华达州的一块平衡岩\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e不过，科学家也找到了一些地震的规律。即便人类依然无法预知地震会在什么时候、什么地点发生，但通过地震危害性分析的概率方法，我们也能大致知道一些地区发生地震的频率。\u003cbr\u003e\u003cbr\u003e这些根据地震危害性分析概率构建出来的地震灾害图，对当地建筑就有非常重要的指导作用。而在过去20年里，科学家也开始意识到平衡岩是衡量极端地面运动的指标之一。\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_1624538db6b5013abac160f7b1aacb91.webp\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e津巴布韦的平衡岩\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e换句话说，平衡岩的存在刚好证明了自这块摇摇欲坠的岩石形成以来，该区域就没有经历过足够猛烈的地震了。否则，这些脆弱的平衡岩很可能会因为摇晃而倒塌，从此泯然于众石。是的，平衡岩倒下之后，和其他石头基本就没什么两样了。\u003cbr\u003e\u003cbr\u003e因此，平衡岩也被用作地震（或者说没有发生过地震）的天然检测器。特别是在地震活跃的地区，平衡岩对人类研究地震的发生更是潜能巨大。\u003cbr\u003e\u003cbr\u003e通过科学的检测手段，科学家可以测得平衡岩的暴露历史。而这块平衡岩所经历的岁月，也正是当地没有发生过足以使平衡岩倒塌的地震的粗略时长。现阶段，一批科学家正在世界各地寻找着各种平衡岩，并为之构建出相应的3D模型，计算其重心和质量等。之后，通过计算机模型，科学家则能在不破坏平衡岩的情况下，模拟出究竟需要多猛烈的地震又或是哪个类型的地震才足以使平衡岩倒塌。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_c6520f4e2e3614d604dcc7f6ff567a87.gif\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e最大水平加速度为0.25g的地震模拟，平衡岩发生倒塌，图源：https://faults.earth.utah.edu/index\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_3e4f95b453128eea51beef01e8ecd5c4.gif\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e最大水平加速度为0.20g的地震模拟，平衡岩不发生倒塌，图源：https://faults.earth.utah.edu/index\u003cbr\u003e\u003cbr\u003e此外，平衡岩还能以更另类的方式揭秘着地震的规律。例如在美国洛杉矶以东约145公里的圣贝纳迪诺山脉中部就坐落着一批平衡岩，它们至少有超过一万年的历史。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_ac2620103de143f0f7f5e4b0abe79a5c.webp\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e圣安德烈亚斯断层长达1300公里，横跨加利福尼亚州\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e但让科学家迷惑的是，当地正处于著名的圣安德烈亚斯断层附近，地震通常200至300年就发生一次。也就是说，这一万年间这些平衡岩至少经历50至100次的大地震。如果根据该地区的国家地震灾害图，这些平衡岩早就该寿终正寝了。就算忽略更早期的地震，1812年和1857年发生的两次大地震就足以让这些巨型岩石掉落。\u003cbr\u003e\u003cbr\u003e然而在现实中，它们却依然保持着“岌岌可危”的状态，偏偏没倒下。而经过长期的研究，研究人员也得出一个结论，可能是两个断层之间的相互作用削弱了附近的地面震动，这才保住了这些平衡岩。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e而除了科学家以外，近年来艺术家们也对这些平衡岩兴趣大发。\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u003cbr\u003e“叠平衡岩”便是现下非常流行的一种艺术，这些岩石平衡艺术家靠着超人的耐心，创造出了无数让人惊叹的“人造平衡岩”。他们完全不需要任何胶水或粘合剂，就能将石头以几乎不可能的姿势立起来，简直是逼死强迫症。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_0fd0c0439a284cbefa8fc70daac4d9e7.webp\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e著名的叠石玩家Michael\u0026nbsp;Grab\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cbr\u003e\u003c/div\u003e\u003cbr\u003e不过有人擅长创造，就有热衷于毁坏。相比于其他地貌，这些平衡岩彷佛更能激起一些人的破坏欲。2012年，美国犹他州的童子军领袖格伦•泰勒和大卫·霍尔就推倒了一块被当地人称为“哥布林”（goblin)的平衡岩。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_213fdbf5ff959f6b70ee451ce3c5ba21.gif\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e当时，他们还将全过程拍下并上传至网络上，他们推倒“哥布林”后的兴奋笑声也被无数网友鄙视。另外，童子军是西方国家家喻户晓的活动组织形式，主要以培养忠诚勇敢、道德正直的青少年为目的。而他们一反常态的不负责任行为，也成功激起了民愤。\u003cbr\u003e\u003cbr\u003e为了这几分钟的快乐，这两人最终被罢免童子军身份，还成功获缓刑一年。事实上，诸如此类的破坏事件绝非只发生了一次。他们不知道自己破坏的不仅仅是一种地貌，还会将其背后的宝贵知识一起掩埋。\u003cbr\u003e\u003cbr\u003e\u003ch3\u003e\u003cspan style=\"font-weight: bold;\"\u003e参考资料\u003c/span\u003e\u003c/h3\u003eShi,\u0026nbsp;B.,\u0026nbsp;Abdolrasool,\u0026nbsp;A.,\u0026nbsp;Zeng,\u0026nbsp;Y.,\u0026nbsp;And\u0026nbsp;And\u0026nbsp;Brune,\u0026nbsp;J.\u0026nbsp;N.,\u0026nbsp;1996,\u0026nbsp;Rocking\u0026nbsp;And\u0026nbsp;Overturning\u0026nbsp;Of\u0026nbsp;Precariously\u0026nbsp;Balanced\u0026nbsp;Rocks\u0026nbsp;By\u0026nbsp;Earthquakes:\u0026nbsp;Bulletin\u0026nbsp;Of\u0026nbsp;The\u0026nbsp;Seismological\u0026nbsp;Society\u0026nbsp;Of\u0026nbsp;America,\u0026nbsp;V.\u0026nbsp;86,\u0026nbsp;No.\u0026nbsp;5,\u0026nbsp;P.\u0026nbsp;1364-1371.\u003cbr\u003e\u003cbr\u003eJAMES\u0026nbsp;BRUNE,\u0026nbsp;MATTHEW\u0026nbsp;PURVANCE,\u0026nbsp;ABDOLRASOOL\u0026nbsp;ANOOSHEHPOOR\u003cbr\u003e\u003cbr\u003eGauging\u0026nbsp;Earthquake\u0026nbsp;Hazards\u0026nbsp;with\u0026nbsp;Precariously\u0026nbsp;Balanced\u0026nbsp;Rocks.American\u0026nbsp;Scientist.2007\u003cbr\u003e\u003cbr\u003eSABRINA\u0026nbsp;IMBLER.Why\u0026nbsp;Scientists\u0026nbsp;Fall\u0026nbsp;for\u0026nbsp;Precariously\u0026nbsp;Balanced\u0026nbsp;Rocks.Atlas\u0026nbsp;Obscura.2020.01.09\u003cbr\u003e\u003cbr\u003ehttps://faults.earth.utah.edu/index\u003cbr\u003e\u003cbr\u003eElizabeth\u0026nbsp;Goldbaum.Why\u0026nbsp;10,000-Year-Old\u0026nbsp;Gravity-Defying\u0026nbsp;Rocks\u0026nbsp;Haven't\u0026nbsp;Toppled.Live\u0026nbsp;Science.2015\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003cp\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_575c95b211cb0d1bf288b6a1d05ec471.png","publishtimeCN":"2020年03月03日 13:37:52","publishtime":1.583213872e+12,"__v":0}
{"_id":{"$oid":"5e5df00e617a995a48983104"},"isup":true,"clicknum":0,"clicknumshow":true,"title":"第92届奥斯卡提名影片中那些“看不见”的视效","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e\u003cspan style=\"font-size: x-small; color: rgb(249, 150, 59);\"\u003e原创\u003c/span\u003e\u003cspan style=\"font-weight: bold;\"\u003e\u0026nbsp;瑞云渲染\u0026nbsp;Lúcio\u0026nbsp;瑞云渲染服务号\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e在第92届奥斯卡提名影片中，很多影片的视效镜头几乎无法让人察觉，包括最佳视效得主《1917》，下面我们一起来回顾那些精彩的让人无法察觉的视效吧！\u003cbr\u003e\u003cbr\u003e饱受战争蹂躏的法国：隐形的视效\u003cbr\u003e\u003cbr\u003e奥斯卡最佳视效得主《1917》，将大量的实拍镜头和“隐形的”视效镜头融合一起，使电影看起来像是一镜到底拍摄完成。\u003cbr\u003e\u003cbr\u003e这些视效很难让人察觉，不过这就是优秀影片的重要之处，但如果仔细观察，当电影角色走到树后面或者穿过门口或跳下桥时，你可能才会注意到。MPC是电影《1917》的视效工作室，在制作中甚至演员的脸在画面中完全可见时，也需要进行过渡处理。\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_222e4634556ff62426500cbec61156ae.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e《1917》影片中还有更多“经典”的视效镜头，例如飞机坠毁的场景，这个场景涉及了很多独立的元素。包括一个蓝幕拍摄的飞机残骸，以及男主角Schofield发现自己身处激流中的那一幕，这个镜头实际上是演员乔治·麦凯（George\u0026nbsp;MacKay）在前伦敦奥运会皮划艇激流回旋比赛场地拍摄，后期将其转换成了河流环境。视效让导演萨姆·门德斯（Sam\u0026nbsp;Mendes）可以毫无限制的完成他的一镜到底电影，任何留在画面中的现代元素、工作人员或相机设备都可以在后期抹去。\u003cbr\u003e\u003cbr\u003e同样的无障碍艺术创作也应用在马丁·斯科塞斯（Martin\u0026nbsp;Scorsese）的《爱尔兰人》，无需使用面部标记就可以捕捉到的”逆龄“老戏骨们的表演，让CG处理过程不着痕迹地落在传奇演员罗伯特·德尼罗（Robert\u0026nbsp;De\u0026nbsp;Niro）以及阿尔·帕西诺（Al\u0026nbsp;Pacino）身上。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u0026nbsp;\u0026nbsp;\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_deb27ab447340fac3a6e23beccc3ef3b.webp\" style=\"max-width: 100%;\"\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_03c2abb895cfc88755be309101e2580a.webp\" style=\"max-width:100%;\"\u003e\u003cbr\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u0026nbsp;\u0026nbsp;\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_d1cf65c318ef1d01a8d4996b85ebfc83.gif\" style=\"max-width: 100%;\"\u003e\u003cbr\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/div\u003e大多数涉及CG演员或者逆龄视效的电影，都需要饰演者戴上面部捕捉专用头盔或者做脸部标记。这些元素用于获取面部的动作数据有至关重要的作用，但它们也可能会妨碍演员的表演。电影《爱尔兰人》所采用的是工业光魔（ILM）开发的技术解决方案：将三台摄影机架在带云台的特制的摄影机架，中间一台为正常摄影机，旁边两台为红外模式的监控摄影机，这三台摄影机拍摄的画面通过工业光魔的专利软件Flux转换成3D数字化动捕图像，从而打造逆龄效果。这样做的目的是尽可能地保留演员原始的表演。\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e真实的画面其实是假的\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e大多数视效是希望使观众确信摄制组是走出去并拍摄有难度的镜头。事实上制作团队经常这样做，但是出于预算、安全问题和制作周期的考虑，常常会限制了这样的做法。例如电影《极速车王》的时间背景是六十年代，但在现代已经没有当年的赛车场地。再现历史意味着拍摄地点可以通过视效进行转换。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_7bbab451a8c864d0178eadfa06b3312f.gif\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_871e3ff444d4242b0e1894793b724e78.gif\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/div\u003e勒芒由乔治亚州和南加州的一些地方组成，包括圣克拉里塔的阿瓜杜尔塞机场。视效团队在体育场增加了欢呼的人群，并协助完成带有CG赛车与增强撞车效果的快节奏赛车场景。\u003cbr\u003e\u003cbr\u003e看不见的效果并不总出现在充满活力的场景。奉俊昊的《寄生虫》是一部很少有人认为有视效的影片，其中包括许多增强镜头，用来扩展城市场景，包括在暴雨天气下的场景。这段镜头在蓝幕拍摄淹水场景，蓝色部分用来填充背景展示建筑和其他细节，让导演可以完全控制镜头选择和演员布局。\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_87efae59a1f3a3dd07b334003f8d35cd.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e托德·菲利普斯（Todd\u0026nbsp;Phillips）的电影《小丑》，放弃了超级英雄电影特有的视效驱动的拍摄方式，打造更为扎实的故事，但这部奥斯卡最佳影片仍拥有上百个视效镜头，主要应用在虚构的1980年代哥谭市，艺术家们在开场喷绘城市街景，贫民窟的拍摄以及暴乱的场景中。影片中一些血腥的片段也使用了数字化而非真实的血液，比如Arthur在公寓里谋杀了一些人。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_d229d6e06e1e592f1882ddfb81c345f6.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/div\u003e\u003cbr\u003e\u003cbr\u003eCG制作的血液避免了在拍摄过程中的长复位时间，并可以使最终的“数字”妆容保持一致。这类似于John\u0026nbsp;Wick的《疾速备战（John\u0026nbsp;Wick:\u0026nbsp;Chapter\u0026nbsp;3\u0026nbsp;-\u0026nbsp;Parabellum）‎\u0026nbsp;》中使用的手法，尤其是在角色在装满武器的玻璃箱子中打斗的场景。玻璃不是真的在那里，Method\u0026nbsp;Studios在后期以数字方式制作了场景中所有玻璃。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_b438522e8174d5c7390a7cb972693351.webp\" style=\"max-width: 100%;\"\u003e\u0026nbsp;\u003cbr\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_caa81e0bf1872ca70ae5e09754f91d09.webp\" style=\"max-width:100%;\"\u003e\u003cbr\u003e\u003c/div\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003eMethod\u0026nbsp;Studios在《疾速备战》中的后期创作了被破坏的玻璃。图片源自：Method\u0026nbsp;Studios/Lionsgate\u003c/span\u003e\u003c/div\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e\u003cdiv style=\"text-align: center;\"\u003e隐形的视效，在大部分视效电影中...\u003c/div\u003e\u003c/span\u003e\u003cbr\u003e“看不见”的视效不局限于小型或者非主打视效的电影，也应用于大制作的电影，例如在《复仇者联盟4：终局之战》中太空服是完全数字化的。\u003cbr\u003e\u003cbr\u003e视效工作室Framestore将数字服装后期转换在真实拍摄的演员身上（其他工作室在终局之战中使用这种方法制作数字服装，而CG衣橱是漫威电影中常见的制作特色）。为什么演员不穿服装？因为在拍摄之前，还没有完成设计。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_649464e4f8271af6a509fb58823f88ef.webp\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_2279cbc884163ea6d47b507f5b0cc58b.gif\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e图片源自：Marvel\u0026nbsp;Studios、Weta\u0026nbsp;Digital\u003c/span\u003e\u003c/div\u003e\u003cbr\u003e另一部奥斯卡提名电影《星球大战：天行者崛起》同样包含了数十个“看不见”的视效镜头，应用在更宽更明显的场景，有CG角色，宇宙飞船和行星这种。例如，为了使凯丽·费雪（Carrie\u0026nbsp;Fisher）重现莉亚公主在荧幕中，电影摄制者将女演员未曾使用的镜头与现场替身拍摄的片段合成在一起。事实上，费雪在拍摄《星球大战：天行者崛起》之前就过世了。用视效制作莉亚的衣服和头发，这是完全合成的。这只是魔术效果的另一个示例，视效几乎应用在你所看到的所有电影中，无论大小制作。\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u003c/span\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_d6826451e19b352ca732a061f5be9ab4.gif\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u003c/span\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_931debc3170fbf755e0e46bc2c61e846.webp\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cp\u003e\u003c/p\u003e\u003cp style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_88859abdb9804be92909d3274af0bee4.webp\" style=\"max-width: 100%;\"\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_9b3595742e8db64e3538f3324dee406c.webp\" style=\"max-width: 100%;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/div\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e文章素材来源：Polygon\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cp\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_052bef9e1b5de55084b948b9f4ce8153.png","publishtimeCN":"2020年03月03日 13:50:06","publishtime":1.583214606e+12,"__v":0,"uptime":"1583510757002"}
{"_id":{"$oid":"5e5dfac1617a995a48983105"},"isup":true,"clicknum":0,"clicknumshow":true,"title":"《星际穿越》：人们渴望探索宇宙的心从未变过","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e\u0026nbsp; 《星际穿越》（Interstellar）上映于2014年，在当时是引起过一阵相对论和黑洞的讨论热潮的科幻电影。电影由著名导演克里斯托弗诺兰执导，讲述了未来人类面临生存危机时，不得不想尽办法外出探索新的宜居星球的故事。\u003cbr\u003e\u003cbr\u003e1.\u0026nbsp;黑洞的故事\u003cbr\u003e\u003cbr\u003e本片有接近和穿越黑洞的情节，也有黑洞的科幻镜头特写。\u003c/p\u003e\u003cp style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_2ee8ba3be48dbb7ebe9eb6b28d4aec61.png\" style=\"max-width:100%;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e电影中的黑洞照片\u003c/span\u003e\u003c/div\u003e去年4月公布的黑洞照片让大家一下子又回想起来了星际穿越中的黑洞，尽管略有些差异，但是仍然可以看出来星际穿越的黑洞形象设计，是按照符合当前物理学认知和解释的范围下制作的，所以电影中的黑洞才能和后来的黑洞照片有不少相似之处。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"https://i0.hdslb.com/bfs/article/watermark/885a02c442675e7bd135b3b82497898a142cba24.jpg@1000w_556h.webp\" style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u0026nbsp;\u0026nbsp;\u003c/span\u003e\u003c/div\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e\u003cdiv style=\"text-align: center;\"\u003e天文观测的黑洞照片\u003c/div\u003e\u003c/span\u003e2.\u0026nbsp;相对尊重物理学的商业电影\u003cbr\u003e\u003cbr\u003e这部电影上映的时候曾经引起过广泛的讨论，有的人认为电影中所展现出来的物理知识是惊人的，也有些人找出了很多细节上并不科学的地方。\u003cbr\u003e\u003cbr\u003e不过总体来说我认为这已经很棒了，因为星际穿越比其他的科幻电影都更加的尊重科学。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cspan style=\"font-size: small;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_d461298a723ffbed84610b8920ff8385.png\" style=\"color: rgb(139, 170, 74); max-width: 100%;\"\u003e\u003c/span\u003e\u003c/div\u003e\u003cspan style=\"color: rgb(139, 170, 74); font-size: small;\"\u003e\u003cdiv style=\"text-align: center;\"\u003e引力导致的时间变化\u003c/div\u003e\u003c/span\u003e要知道很多充满想象力的科幻电影，我们从一开始就没想过他们的那些东西到底是不是科学的。凡是没法解释的地方就用新科技代替，这样更加简单粗暴。\u003cbr\u003e\u003cbr\u003e但是星际穿越仍然期望于立足当下的物理学知识框架，尽量的在电影中展现出符合当前物理学认知的内容。但是别忘了，这毕竟是一部商业电影，最终的目的仍然是为了赚回票房回报投资。因此，在内容上做到这样的程度我觉得已经很出色了。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_8005d2843ac19efb5cfd8e1138e3eb22.png\" style=\"color: rgb(139, 170, 74); font-size: small; max-width: 100%;\"\u003e\u003c/div\u003e\u003cspan style=\"font-size: small; color: rgb(139, 170, 74);\"\u003e\u003cdiv style=\"text-align: center;\"\u003e假想中的高维空间\u003c/div\u003e\u003c/span\u003e3.\u0026nbsp;小时候的梦想和未来的理想\u003cbr\u003e\u003cbr\u003e我小时候的梦想是成为一名天文学家，我这是正正经经的在班级的某个什么大会上写在我的个人纸条交上去的。所以这也是后来我高中去学习物理竞赛的原因。\u003cbr\u003e\u003cbr\u003e不过后来随着人生不可避免的波折，这个梦想基本上是越走越远了。到现在，我已经完全忘记了当年物理竞赛的知识了，所以尽管我看这部电影基本概念都能理解，但是让我挑刺我是没有这个实力了。\u003cbr\u003e\u003cbr\u003e但是无论人生如何的随波逐流，有些东西在心里是永远不会变的，渴望探索宇宙的心在某些记号的提醒下总会时不时的又回到我的脑海。也希望未来有一天，我还能见证我们踏出那一步吧。\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e\u003cp style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public/uploads/upload_0a81d4b933e64ae920ac8906fd4904e7.png\"\u003e\u0026nbsp;\u0026nbsp;\u003cbr\u003e\u003c/p\u003e","cover":"http://localhost:3000/public\\uploads\\upload_878dae6777a929b26135176381a9b72d.png","publishtimeCN":"2020年03月03日 14:35:45","publishtime":1.583217345e+12,"__v":0,"uptime":"1583510633243"}
{"_id":{"$oid":"5e6272d30a664094dc969776"},"isup":true,"clicknum":0,"clicknumshow":true,"title":"收藏！代码调优的6大法则都在这里了","author":{"$oid":"5e33d79b0cf97daa9884ed24"},"detail":"\u003cp\u003e数学家高斯在小学的时候，老师要求从1+2+3开始一直加到100，得出的和是多少？其他同学都费劲地一个数一个数的加，只有小高斯注意到了这些数可以两两配对，相加和为101，所以想到一共有50对101，求和可以用乘法：50X101=5050。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e有没有感受到数学思维的强大？其实，编程中的代码优化，就与数学公式有着异曲同工之妙。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e小白与大神写同一个程序，小白跑200万条数据，需要8小时，而大神在进行代码优化后，只需要40分钟，效率提高了1200%！\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e要成为金字塔尖的程序员，不仅要关注程序能不能运行，更要关注程序的运行效率，在每一个字符，每一段语句下功夫，这就是代码调优。为了帮助大家成为一个注重细节的程序员，来看看以下6大代码调优法则！\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3\u003e代码调优6大法则\u003c/h3\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003ch1\u003e空间换时间法则\u003c/h1\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e修改数据结构\u003c/span\u003e。为了减少数据上的常见运算所需要的时间，我们通常可以在数据结构中增加额外的信息，或者修改数据结构中的信息使之更易访问。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e存储预先计算好的结果\u003c/span\u003e。对于开销较大的函数，可以只计算一次，然后将计算结果存储起来以减少开销。以后再需要该函数时，可以直接查表而不需要重新计算。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e高速缓存\u003c/span\u003e。最经常访问的数据，其访问开销应该是最小的。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e懒惰求值\u003c/span\u003e。除非需要，否则不对任何一项求值。这一策略可以避免对不必要的项求值。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003ch1\u003e\u003cbr\u003e时间换空间法则\u003c/h1\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e堆积\u003c/span\u003e。密集存储表示可以通过增加存储和检索数据所需的时间来减少存储开销。尽管堆积有时通过牺牲时间来获取空间，但是这种较小的表示方式处理起来通常更快。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e解释程序\u003c/span\u003e。使用解释程序通常可以减少表示程序所需的空间，在解释程序中常见的操作序列以一种紧凑的方式表示。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e代码空间技术\u003c/span\u003e。有时候空间的瓶颈不在于数据，而在于程序本身的规模。在过去的艰苦年代，我见到的图形程序通篇都是类似下面的代码：\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003efor\u0026nbsp;i\u0026nbsp;=\u0026nbsp;[17,\u0026nbsp;43]\u0026nbsp;set(i,\u0026nbsp;68)\u0026nbsp;for\u0026nbsp;i\u0026nbsp;=\u0026nbsp;[18,\u0026nbsp;42]\u0026nbsp;set(i,\u0026nbsp;69)\u0026nbsp;\u003cdiv\u003efor\u0026nbsp;j\u0026nbsp;=\u0026nbsp;[81,\u0026nbsp;91]\u0026nbsp;set(30,\u0026nbsp;j)\u0026nbsp;for\u0026nbsp;j\u0026nbsp;=\u0026nbsp;[82,\u0026nbsp;92]\u0026nbsp;set(31,\u0026nbsp;j)\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e其中set(i,\u0026nbsp;j)“点亮”屏幕位置(i,\u0026nbsp;j)处的图形元素。使用适当的函数，例如用于绘制水平线的hor函数和绘制垂直线的ver函数，就可以使用如下所示的代码替换上面的代码：\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003ehor(17,\u0026nbsp;43,\u0026nbsp;68)\u0026nbsp;hor(18,\u0026nbsp;42,\u0026nbsp;69)\u0026nbsp;vert(81,\u0026nbsp;91,\u0026nbsp;30)\u0026nbsp;vert(82,\u0026nbsp;92,\u0026nbsp;31)\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e上述代码又可以用一个解释程序来替换，这个解释程序从类似下面的数组中读取命令：\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eh\u0026nbsp;17\u0026nbsp;43\u0026nbsp;68h\u0026nbsp;18\u0026nbsp;42\u0026nbsp;69v\u0026nbsp;81\u0026nbsp;91\u0026nbsp;30v\u0026nbsp;82\u0026nbsp;92\u0026nbsp;31\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e如果上面的代码仍然占用太多的空间，那么可以为命令（h、v或两个其他命令）分配两个位，并为后面的三个数（这些数是范围0~1023内的整数）各分配10个位。于是，上面的每一行都可以用一个32位的字来表示（当然，这种转换应该由程序来进行）。这种假设的情况揭示了用于节省代码空间的几种通用技术。\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_8d9a70c390c62fa57a674d04a00a60df.webp\" style=\"max-width: 100%;\"\u003e\u003c/div\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e函数定义\u003c/span\u003e。通过用函数替换代码中的常见模式可以简化上述程序，相应地也就减少了它的空间需求，并增加了其清晰性。这是一个“自底向上”设计的普通例子。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e尽管我们不能忽视自顶向下的方法，但是由良好的原始对象、组件和函数所给出的均一的视图可以使系统维护起来更加简单，同时也节省了空间。微软删除了很少使用的函数，将它的整个Windows系统压缩为更加紧凑的Windows\u0026nbsp;CE，使其能在具有更小内存的“移动计算平台”上运行。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e更小的用户界面（UI）在窄屏幕的小型机器（范围从嵌入式系统到掌上电脑）上运行得很好，熟悉的界面对用户来说非常方便。更小的应用编程接口（API）使得系统对于Windows\u0026nbsp;API程序员来说很熟悉（并且对于许多程序来说，即使不兼容，也非常接近）。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e解释程序\u003c/span\u003e。在图形程序中，我们用4字节的解释程序命令替换了一长行的程序文本。描述了一个用于格式信函编程的解释程序，尽管它的主要目的是使编程和维护更加简单，但是它同时也减少了程序的空间。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eKernighan和Pike在他们Practice\u0026nbsp;of\u0026nbsp;Programming一书介绍了“解释程序、编译器和虚拟机”。他们列举了许多例子来支撑他们的结论：\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e“虚拟机是以前的一个有趣想法，最近借助于Java和Java虚拟机（Java\u0026nbsp;Virtual\u0026nbsp;Machine,　JVM）又重新流行起来了；对于高级语言编写的程序来说，它们很容易提供可移植的、高效的表示。”\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e翻译成机器语言\u003c/span\u003e。在节省空间方面，大多数程序员都较少控制的是将源语言转换成机器语言。对编译器进行一些微小更改可以将Unix系统早期版本的代码空间减少5个百分点。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e作为最后的手段，程序员可能会考虑到将大型系统中的关键部分用汇编语言进行手工编码。这个高开销、易出错的过程仅能带来一点点好处；不过，该方法还是常常用于一些内存宝贵的系统，比如数字信号处理器。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eApple\u0026nbsp;Macintosh于1984年诞生，当时是一款令人称奇的机器。这款小小的计算机（128\u0026nbsp;KB\u0026nbsp;RAM）具有令人震惊的用户界面和功能强大的软件集。设计小组预期将制造好几百万台这样的机器，并且只提供64\u0026nbsp;KB的ROM。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e通过谨慎的函数定义（包括泛化运算符、归并函数和删除功能特性）并使用汇编语言手工编码整个ROM程序，该小组将令人难以置信的众多系统功能集成到了一个极微小的ROM上。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e他们估计那些经过极度调优的代码（具有谨慎的寄存器分配和指令选择）的规模只有从高级语言编译过来的等价代码的一半（尽管那时编译器已经有了很大的改进）。紧凑的汇编代码运行起来也非常快。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003ch1\u003e循环法则\u003c/h1\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e将代码移出循环\u003c/span\u003e。与其在循环的每次迭代时都执行一次某种计算，不如将其移到循环体外，只计算一次。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e合并测试条件\u003c/span\u003e。高效的内循环应该包含尽量少的测试条件，最好只有一个。因此，程序员应尽量用一些退出条件来模拟循环的其他退出条件。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e循环展开\u003c/span\u003e。循环展开可以减少修改循环下标的开销，对于避免管道延迟、减少分支以及增加指令级的并行性也都很有帮助。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e删除赋值\u003c/span\u003e。如果内循环中很多开销来自普通的赋值，通常可以通过重复代码并修改变量的使用来删除这些赋值。具体说来，删除赋值i\u0026nbsp;=\u0026nbsp;j后，后续的代码必须将j视为i。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e消除无条件分支\u003c/span\u003e。快速的循环中不应该包含无条件分支。通过“旋转”循环，在底部加上一个条件分支，能够消除循环结束处的无条件分支。该操作通常由优化的编译器完成。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e循环合并\u003c/span\u003e。如果两个相邻的循环作用在同一组元素上，那么可以合并其运算部分，仅使用一组循环控制操作。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cdiv style=\"text-align: center;\"\u003e\u003cimg src=\"http://127.0.0.1:3000/public\\uploads\\upload_bb97e7f53a91b416700c06128d01fc8e.webp\" style=\"max-width: 100%;\"\u003e\u003c/div\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003ch1\u003e逻辑法则\u003c/h1\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e利用等价的代数表达式\u003c/span\u003e。如果逻辑表达式的求值开销太大，就将其替换为开销较小的等价代数表达式。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e短路单调函数\u003c/span\u003e。如果我们想测试几个变量的单调非递减函数是否超过了某个特定的阈值，那么一旦达到这个阈值就不再需要计算任何变量了。该法则的一个更成熟的应用就是，一旦达到了循环的目的就退出循环。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e对测试条件重新排序\u003c/span\u003e。在组织逻辑测试的时候，应该将低开销的、经常成功的测试放在高开销的、很少成功的测试前面。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e预先计算逻辑函数\u003c/span\u003e。在比较小的有限域上，可以用查表来取代逻辑函数。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e消除布尔变量\u003c/span\u003e。我们可以用if\u0026nbsp;-\u0026nbsp;else语句来取代对布尔变量v的赋值，从而消除程序中的布尔变量。在该if\u0026nbsp;-\u0026nbsp;else语句中，一个分支表示v为真的情况，另一个分支表示v为假的情况。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003ch1\u003e过程法则\u003c/h1\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e打破函数层次\u003c/span\u003e。对于（非递归地）调用自身的函数，通常可以通过将其改写为内联版本并固定传入的变量来缩短其运行时间。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e递归函数转换\u003c/span\u003e。递归函数的运行时间往往可以通过下面的转换来缩短。将递归重写为迭代，通过使用一个显式的程序栈将递归转化为迭代。（如果函数仅包含一个对其自身的递归调用，那么就没有必要将返回地址存储在栈中）。\u003cbr\u003e\u003cbr\u003e如果函数的最后一步是递归调用其自身，那么使用一个到其第一条语句的分支来替换该调用，这通常称为消除尾递归。解决小的子问题时，使用辅助过程通常比把问题的规模变为0或1更有效。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e\u003cbr\u003e并行性\u003c/span\u003e。在底层硬件条件下，我们构建的程序应该尽可能多地挖掘并行性。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003ch1\u003e表达式法则\u003c/h1\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e编译时初始化\u003c/span\u003e。在程序执行之前，应该对尽可能多的变量初始化。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e利用等价的代数表达式\u003c/span\u003e。如果表达式的求值开销太大，就将其替换为开销较小的等价代数表达式。用加法替代乘法，降低数组元素上的循环强度。很多编译器进行了这一优化。这种方法可以推广为一大类增量算法。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e消除公共子表达式\u003c/span\u003e。如果两次对同一个表达式求值时，其所有变量都没有任何改动，那么我们可以用下面的方法避免第二次求值：存储第一次的计算结果并用其取代第二次求值。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e成对计算\u003c/span\u003e。如果经常需要对两个类似的表达式一起求值，那么就应该建立一个新的过程，将它们成对求值。如果insert函数的参数已经在集合中，C++代码就使用不完成任何操作的insert替代这两个函数。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e利用计算机字的并行性\u003c/span\u003e。用底层计算机体系结构的全部数据路径宽度来对高开销的表达式求值。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e看完这6大代码调优法则，是不是恍然大明白的？有时候，你不是不够努力，而是用错了方法，学好《编程珠玑》中的方法论，更有效率地攀登程序员进阶之路！\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cspan style=\"font-weight: bold;\"\u003e编程珠玑\u0026nbsp;第2版\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e作者：[美]乔恩·本特利（Jon,Bentley）\u003cbr\u003e\u003cbr\u003e京东\u003cbr\u003e\u003cbr\u003e本书是计算机科学方面的经典名著。书的内容围绕程序设计人员面对的一系列实际问题展开。作者以其独有的洞察力和创造力，引导读者理解这些问题并学会解决方法，而这些正是程序员实际编程生涯中至关重要的。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e本书的特色是通过一些精心设计的有趣而又颇具指导意义的程序，对实用程序设计技巧及基本设计原则进行了透彻而睿智的描述，为复杂的编程问题提供了清晰而完备的解决思路。本书对各个层次的程序员都具有很高的阅读价值。\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003ch3\u003e\u003cspan style=\"font-weight: bold;\"\u003e-END-\u0026nbsp;\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e","cover":"http://localhost:3000/public\\uploads\\upload_fdf2c8b3d727b64a9ce1e5b02dd46d6d.png","publishtimeCN":"2020年03月06日 23:57:07","publishtime":1.583510227e+12,"__v":0,"uptime":"1583510758980"}
